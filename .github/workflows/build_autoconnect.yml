name: build autoconnect

on:
  workflow_dispatch:
  push:
    branches: [ autoconnect  ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ autoconnect ]
  merge_group:
    types: [ checks_requested ]

jobs:
  build:
    name: Build and test
    runs-on: macos-13 # emulator never starts on macOS 14 https://github.com/ReactiveCircus/android-emulator-runner/issues/392#issuecomment-2106167725

    steps:
      - name: Checkout (with history)
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout (without history)
        if: ${{ github.event_name != 'push' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@8379f6a1328ee0e06e2bb424dadb7b159856a326 # v4.4.0

      - name: Setup Android SDK
        uses: android-actions/setup-android@9fc6c4e9069bf8d3d10b2204b1fb8f6ef7065407 # v3.2.2

      - name: Cache Gradle Home files
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        continue-on-error: true
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-home-examples-${{ hashFiles('**/*.gradle') }}

      - name: Build ConnectBot
        run: ./gradlew build bundleGoogleRelease

      - name: Run instrument tests
        uses: reactivecircus/android-emulator-runner@1dcd0090116d15e7c562f8db72807de5e036a4ed # v2.34.0
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: Nexus 4
          script: ./gradlew connectedCheck --continue

      - name: Prepare release
        if: ${{ github.event_name == 'push' }}
        run: |
          if git describe --exact-match; then \
            TAGGED=yes
          fi

          if [[ -n $TAGGED ]]; then
            GITHUB_TAG="$(git describe)"
            echo "${GITHUB_TAG}" > tag.txt
            echo "Release ${GITHUB_TAG}" > release-title.txt
          else \
            GITHUB_TAG="git-$(git describe)"
            GITHUB_TITLE="$(git log -1 --pretty=%B | head -1)"
            echo "${GITHUB_TAG}" > tag.txt
            echo "${GITHUB_TAG}: ${GITHUB_TITLE}" > release-title.txt
          fi
          cp ./app/build/outputs/apk/oss/release/app-oss-release-unsigned.apk ConnectBot-${GITHUB_TAG}-oss-unsigned.apk
          cp ./app/build/outputs/apk/google/release/app-google-release-unsigned.apk ConnectBot-${GITHUB_TAG}-google-unsigned.apk
          cp ./app/build/outputs/bundle/googleRelease/app-google-release.aab ConnectBot-${GITHUB_TAG}-google-unsigned.aab
          cp ./app/build/outputs/native-debug-symbols/googleRelease/native-debug-symbols.zip ConnectBot-${GITHUB_TAG}-google.native-debug-symbols.zip
          cp ./app/build/outputs/native-debug-symbols/ossRelease/native-debug-symbols.zip ConnectBot-${GITHUB_TAG}-oss.native-debug-symbols.zip
  
      - name: Store artifacts for upload
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: apk
          path: |
            release-title.txt
            tag.txt
            ConnectBot-*-unsigned.apk
            ConnectBot-*-unsigned.aab
            ConnectBot-*.native-debug-symbols.zip

  sign-and-release:
    name: Sign and Release
    needs: build
    if: ${{ (github.event_name == 'push') && (github.repository == 'adntian/connectbot') && ((github.ref == 'refs/heads/autoconnect') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo "RELEASE_TITLE=$(cat release-title.txt)" >> "$GITHUB_OUTPUT"
          echo "GITHUB_TAG=$(cat tag.txt)" >> "$GITHUB_OUTPUT"

      - name: Setup Android SDK
        uses: android-actions/setup-android@9fc6c4e9069bf8d3d10b2204b1fb8f6ef7065407 # v3.2.2

      - name: Setup Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
          # 列出密钥库内容以验证
          keytool -list -v -keystore keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}"

      - name: Sign APKs and AAB
        run: |
          TAG="${{ steps.name.outputs.GITHUB_TAG }}"
          
          # 获取最新的 build-tools 版本
          LATEST_BUILD_TOOLS=$(ls -1 $ANDROID_HOME/build-tools/ | sort -V | tail -1)
          echo "使用 build-tools 版本: $LATEST_BUILD_TOOLS"
          
          sign_apk() {
            UNSIGNED_APK="$1"
            SIGNED_APK="$2"
            echo "尝试使用 apksigner 签名: $UNSIGNED_APK"
            set +e
            $ANDROID_HOME/build-tools/$LATEST_BUILD_TOOLS/apksigner sign \
              --ks keystore.jks \
              --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
              --ks-pass pass:"${{ secrets.KEYSTORE_PASSWORD }}" \
              --key-pass pass:"${{ secrets.KEY_PASSWORD }}" \
              --out "$SIGNED_APK" \
              "$UNSIGNED_APK"
            RESULT=$?
            set -e
            if [ $RESULT -eq 0 ]; then
              echo "apksigner 签名成功，验证签名..."
              $ANDROID_HOME/build-tools/$LATEST_BUILD_TOOLS/apksigner verify --verbose "$SIGNED_APK"
            else
              echo "apksigner 签名失败，尝试 jarsigner..."
              jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
                -keystore keystore.jks \
                -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
                -keypass "${{ secrets.KEY_PASSWORD }}" \
                -signedjar "$SIGNED_APK" \
                "$UNSIGNED_APK" "${{ secrets.KEY_ALIAS }}"
              jarsigner -verify -verbose "$SIGNED_APK"
            fi
            # zipalign
            $ANDROID_HOME/build-tools/$LATEST_BUILD_TOOLS/zipalign -v 4 "$SIGNED_APK" "aligned.apk"
            mv "aligned.apk" "$SIGNED_APK"
          }
          
          # 签名 Google APK
          echo "签名 Google APK..."
          sign_apk "ConnectBot-${TAG}-google-unsigned.apk" "ConnectBot-${TAG}-google-signed.apk"
          
          # 签名 OSS APK
          echo "签名 OSS APK..."
          sign_apk "ConnectBot-${TAG}-oss-unsigned.apk" "ConnectBot-${TAG}-oss-signed.apk"
          
          # 签名 AAB（只能用 jarsigner）
          echo "签名 AAB..."
          UNSIGNED_AAB="ConnectBot-${TAG}-google-unsigned.aab"
          SIGNED_AAB="ConnectBot-${TAG}-google-signed.aab"
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore keystore.jks \
            -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}" \
            -signedjar "${SIGNED_AAB}" \
            "${UNSIGNED_AAB}" "${{ secrets.KEY_ALIAS }}"
          jarsigner -verify -verbose "${SIGNED_AAB}"

      - name: Upload release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          body: "Signed release build"
          draft: true
          tag_name: ${{ steps.name.outputs.GITHUB_TAG }}
          name: ${{ steps.name.outputs.RELEASE_TITLE }}
          generate_release_notes: true
          files: |
            ConnectBot-*-signed.apk
            ConnectBot-*-signed.aab
            ConnectBot-*.native-debug-symbols.zip

      - name: Clean up keystore
        if: always()
        run: rm -f keystore.jks